@model IEnumerable<MvcMovie.Models.Movie>
<!-- Aqui no Index, colocamos no model o mesmo model que colocamos nas outras views,
	porém utilizando IEnumerable, para que seja possível iterar sobre cada objeto dentro
	da lista. -->

@{
    ViewData["Title"] = "Index";
}
<!-- Todas as nossas views de Movies foram criadas a partir do scaffolding. -->

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

<form asp-controller="Movies" asp-action="Index" method="get">
    <p>
        Title: <input type="text" name="SearchString">
        <input type="submit" value="Filter" />
    </p>
</form>
<!--
    Aqui criamos um form, que tem como asp-controller Movies e asp-action Index,
    ou seja, ele irá chamar /Movies/Index. O nome do input é "SearchString", o mesmo
    nome do parâmetro que recebemos no controller. Como não estamos alterando o estado
    da aplicação, e somente estamos filtrando os dados, não é necessário um HttpPost no
    controller.
    Obs: Definimos o method como GET, para podermos capturar as informações de pesquisa.
-->

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ReleaseDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Genre)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Price)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>

<!-- Ou seja, para cada objeto que tivermos dentro da model, exibiremos as informações
	definitas abaixo no nosso html. -->
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReleaseDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Genre)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            <!-- 
                Os links de edit, details e delete são gerados automaticamente
                pelo anchor tag helper do mvc. Os tag helpers permitem que o código
                do lado do servidor participe na criação e renderização do HTML nas páginas
                razor. Ou seja, o anchor tag helper utiliza o metódo de ação do controller
                e o id para gerar um href, que no html é: href="/Movies/Edit/4", por exemplo.
            -->
            </td>
        </tr>
}
    </tbody>
</table>
